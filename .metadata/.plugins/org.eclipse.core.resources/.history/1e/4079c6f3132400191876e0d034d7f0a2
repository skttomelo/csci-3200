package problem7;

import java.util.Random;

public class Driver {
	/*
	* Assignment:
	* Convert the following algorithm descriptions into working Java methods and estimate their big-o notation.
	* 
	* Algorithm 1: Fill the array 'a' from a[0] to a[n-1] as follows: To fill a[i], generate random numbers 
	* until you get one that is not already in a[0] to a[i-1].
	* 		
	* Algorithm 2: Same as algorithm 1, but keep an extra array called the 'used' array. When a random number, 
	* 'ran', is first put into the array 'a', set used[ran] = true. Now, when chosing a random number, 
	* no longer check ever position in 'a' before the one you are filling, just check the 'used' array.
	* 
	* Algorithm 3: Fill the array such that a[i] = i+1. Then,
	* for(i = 1; i < n; i++)
	* swapReferences(a[i], a[random(0,i)]);
	* *Note: Write your own swapReferences method to switch two given positions*
	*/
	
	public static int[] Algorithm1(int n){
		Random r = new Random();
		int[] a = new int[n-1];
		int random_val = 0;
		boolean dne = true;
		for(int i = 0; i<n-1; i++){
			random_val = r.nextInt();
			while(dne == false){
					for(int j = 0; j<i; j++){
						if(a[i] == a[j]){
							random_val = r.nextInt();
							dne = false;
						}else{
							dne = true;
						}
					}
			}
			a[i] = random_val;
		}
		return a;
	}
	
	public static void main(String[] args){
		int[] a = Algorithm1(10);
		System.out.println("Algorithm 1:");
		for(int i = 0; i<a.length; i++){
			System.out.print(a[i]+", ");
		}
		System.out.println("");
	}
}
